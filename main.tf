# provider - what to configure, aws, azure, gcp, etc - focus on azure with azurerm provider

terraform {
  required_providers {
    azurerm = {
      source  = "hashicorp/azurerm"
      version = "3.55.0"
    }
    random = {
      source  = "hashicorp/random"
      version = "3.5.1"
    }
  }
}

provider "azurerm" {
  # which data hall to work within
  subscription_id = "1abe8fed-e8e6-4365-afea-ed8ba68a94b8"
  features {}
}

locals {
  default_location = "norwayeast"
  default_tags     = {
    #<< support tags by policies (automatically generated by azure)
    Environment       = "prod"
    Team              = "citrix"
    "Technical Owner" = "suthakaran.kanesu@nav.no"
    Tenant            = "navno"
    #support
    demo              = "lÃ¦rlinger(ene)"
    provenance        = "https://github.com/navikt/az-laerlinger-demo-tf"
    names             = "Lukasz, Herman"
  }
  no_of_rg = 1
}

## create random postfix
resource "random_string" "suffix" {
  count   = local.no_of_rg
  length  = 10
  special = false
  lower   = true
  upper   = false
  numeric = true
}

# create resource group

resource "azurerm_resource_group" "rg" {
  count    = local.no_of_rg
  name     = "with-vnet_${random_string.suffix[count.index].result}"
  location = local.default_location
  tags     = local.default_tags
}

resource "azurerm_network_security_group" "nsg" {
  count               = local.no_of_rg
  name                = "nsg_${random_string.suffix[count.index].result}"
  location            = azurerm_resource_group.rg[count.index].location
  resource_group_name = azurerm_resource_group.rg[count.index].name
  tags                = local.default_tags
}

resource "azurerm_network_security_rule" "rules" {
  count                      = local.no_of_rg
  name                       = "rule-1"
  priority                   = 999
  protocol                   = "Tcp"
  direction                  = "Inbound"
  access                     = "Allow"
  source_address_prefix      = "*"
  source_port_range          = "*"
  destination_port_range     = "8080"
  destination_address_prefix = "*"

  network_security_group_name = azurerm_network_security_group.nsg[count.index].name
  resource_group_name         = azurerm_resource_group.rg[count.index].name
}

resource "azurerm_virtual_network" "vnet" {
  count               = local.no_of_rg
  name                = "network_${random_string.suffix[count.index].result}"
  address_space       = ["10.0.0.0/24"]
  location            = azurerm_resource_group.rg[count.index].location
  resource_group_name = azurerm_resource_group.rg[count.index].name
  tags                = local.default_tags

  subnet {
    name           = "internal"
    address_prefix = "10.0.0.0/25"
    security_group = azurerm_network_security_group.nsg[count.index].id
  }
}

resource "azurerm_network_interface" "main" {
  count               = local.no_of_rg
  name                = "nic_${random_string.suffix[count.index].result}"
  location            = azurerm_resource_group.rg[count.index].location
  resource_group_name = azurerm_resource_group.rg[count.index].name
  tags                = local.default_tags

  ip_configuration {
    name      = "testconfiguration1"
    subnet_id = lookup({
      for s in azurerm_virtual_network.vnet[count.index].subnet : s.name =>s.id
    }, "internal")
    private_ip_address_allocation = "Dynamic"
  }
}

resource "azurerm_virtual_machine" "main" {
  count                 = local.no_of_rg
  name                  = "vm__${random_string.suffix[count.index].result}"
  location              = azurerm_resource_group.rg[count.index].location
  resource_group_name   = azurerm_resource_group.rg[count.index].name
  network_interface_ids = [azurerm_network_interface.main[count.index].id]
  tags                  = local.default_tags
  vm_size               = "Standard_DS1_v2"

  # Uncomment this line to delete the OS disk automatically when deleting the VM
  delete_os_disk_on_termination = true

  # Uncomment this line to delete the data disks automatically when deleting the VM
  delete_data_disks_on_termination = true

  storage_image_reference {
    publisher = "Canonical"
    offer     = "UbuntuServer"
    sku       = "16.04-LTS"
    version   = "latest"
  }
  storage_os_disk {
    name              = "myosdisk1"
    caching           = "ReadWrite"
    create_option     = "FromImage"
    managed_disk_type = "Standard_LRS"
  }
  os_profile {
    computer_name  = "hostname"
    admin_username = "testadmin"
    admin_password = "Password1234!"
  }
  os_profile_linux_config {
    disable_password_authentication = false
  }
}


#output "subnet" {
#  value = lookup({for s in azurerm_virtual_network.vnet[0].subnet : s.name => s.id}, "internal")
#}
#
#output "rg_name" {
#  value = azurerm_resource_group.rg.name
#}
